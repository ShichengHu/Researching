import numpy as np
import matplotlib.pyplot as plt
from Util.Bases import ClassifierBase


class KnnClassifier(ClassifierBase):
    """
    sample_weight是我希望对不同的值不同加权
    """
    def __init__(self, **kwargs):
        ClassifierBase.__init__(self)
        self._k = kwargs.get("k", 3)
        self._x = self._y = self._sample_weight = None

    def fit(self, x, y, sample_weight=None):
        self._x = np.atleast_2d(x)
        self._y = np.atleast_1d(y)
        assert len(self._x) == len(self._y), "The length of data must be equal"
        if sample_weight is None:
            self._sample_weight = np.ones(len(self._y))
        else:
            self._sample_weight = np.array(sample_weight) * len(self._y)

    def predict_one(self, x):
        x = np.array(x)
        distance_matrix = np.sum((self._x - x)**2, axis=1)
        k_neighbors = np.argsort(distance_matrix)[: self._k]  # 选最近的k个值
        k_labels = self._y[k_neighbors]
        set_neighbors, counts_neighbors = np.unique(k_labels, return_counts=True)  # return_counts返回统计结果
        idx = np.argmax(counts_neighbors)  # 次数最多值对应的索引
        return set_neighbors[idx]

    def predict(self, x, **kwargs):
        x = np.array(x)
        return np.array([self.predict_one(xx) for xx in x])

    def meshgrid_search(self, x_train, y_train, x_test, y_test, upper_bound=100):
        """
        网格搜索寻找最佳的k
        :param x_train:
        :param y_train:
        :param x_test:
        :param y_test:
        :param upper_bound: k取值的上界
        :return: 最佳的k
        """
        acc_lst = []
        for i in range(2, upper_bound):
            print(i)
            knn = self.__class__(k=i)
            knn.fit(x_train, y_train)
            acc_lst.append((knn.acc(x_test, y_test)))

        acc_lst = np.array(acc_lst)
        label = np.argmax(acc_lst)  # 最佳超参数k

        k_lst = np.arange(2, upper_bound)
        plt.plot(k_lst, acc_lst)
        plt.scatter(k_lst[label], acc_lst[label], c='r')
        plt.ylim(0, 1)
        plt.xlabel("k")
        plt.ylabel("acc")
        plt.title("KNN Accuracy rate")
        plt.show()
        plt.savefig("KNN 0228 ratio curve 2-100")
        return label+2
